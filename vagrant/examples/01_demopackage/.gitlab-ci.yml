stages:
  - docker-build
  - artifact-build
  - package-deploy
  - release

docker-build:
  stage: docker-build
  tags:
  - shared
  - shell
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
  # - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  - echo "$CI_REGISTRY_PASSWORD" | docker login --username "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
  - docker build --pull -t "$DOCKER_IMAGE_NAME" .
  - docker push "$DOCKER_IMAGE_NAME"
  - |
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
      docker push "$CI_REGISTRY_IMAGE:latest"
    fi
  # Run this job in a branch where a Dockerfile exists
  rules:
  - if: $CI_COMMIT_BRANCH
    exists:
    - Dockerfile

artifact-build:
  # Fetch the previously build Registry image
  image: $CI_REGISTRY_IMAGE:latest
  stage: artifact-build
  tags:
  - shared
  - docker
  script: xelatex example.tex example.pdf
  artifacts:
    paths:
    - example.pdf
    expire_in: 1 week
  rules:
  - if: $CI_COMMIT_BRANCH
    exists:
    - example.tex

publish-pip:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:latest
  tags:
  - shared
  - docker
  rules:
  - if: $CI_COMMIT_TAG
  stage: package-deploy
  script:
    - pip install build twine
    - python -m build
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*

release-job:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
  - shared
  - docker
  rules:
  - if: $CI_COMMIT_TAG
  stage: release
  script:
  - echo "Create release"
  release:
    name: 'My awesome release $CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: 'Release created using the release-cli'
