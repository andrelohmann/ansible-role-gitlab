---
- hosts: all
  become: true
  become_method: sudo

  vars:

    # Set access credentials for dependency containers
    # These are applied in role docker_compose_dependencies
    # Postgres DB
    dependencies_postgres_db: gitlabdb
    dependencies_postgres_user: gitlab
    dependencies_postgres_passwd: gitlab_secret
    # Redis
    dependencies_redis_secret: r3dis.S3cr3t
    # Minio S3 API
    dependencies_minio_rootuser: minioroot
    dependencies_minio_rootpasswd: miniorootpw
    # AK / SK for the bucket access user
    dependencies_minio_accesskey: 43D9EPVMO0QGJ38GXTDO
    dependencies_minio_secretkey: NUf8Ucvs0A84m8Ml8P4ypvMdGYigStjtJdmHeSqL
    dependencies_minio_endpoint: http://localhost:9000
    dependencies_minio_region: us-east-1

    # Install postgresql Client to reflect the version
    # of the external postgresql database
    postgresql_version: 16
    postgresql_clients_only: true

    gitlab_postgresql_psql_path: /usr/bin/psql
    gitlab_postgresql_pg_dump_path: /usr/bin/pg_dump

    # gitlab_release: 16.7.3-ce.0
    gitlb_api_base_url: http://gitlab.lokal/api/v4/
    gitlab_ee: true
    gitlab_initial_root_password: P@ssW0rd.123!
    gitlab_config:

    # set the URL
    - namespace: external_url
      value: "'http://gitlab.lokal'"

    # Enable the docker registry
    - namespace: registry_external_url
      value: "'http://docker.lokal'"
    - namespace: registry
      key: enable
      value: "true"

    # Set the mailpit catch all data
    - namespace: gitlab_rails
      key: gitlab_email_from
      value: "'gitlab@gitlab.lokal'"
    - namespace: gitlab_rails
      key: gitlab_email_reply_to
      value: "'gitlab@gitlab.lokal'"
    - namespace: gitlab_rails
      key: smtp_enable
      value: "true"
    - namespace: gitlab_rails
      key: smtp_address
      value: "'localhost'"
    - namespace: gitlab_rails
      key: smtp_port
      value: 1025

    # Set external redis
    - namespace: redis
      key: enable
      value: "false"
    - namespace: gitlab_rails
      key: redis_host
      value: "'localhost'"
    - namespace: gitlab_rails
      key: redis_port
      value: "6379"
    - namespace: gitlab_rails
      key: redis_password
      value: "'{{ dependencies_redis_secret }}'"

    # Set external postgres
    - namespace: postgresql
      key: enable
      value: "false"
    - namespace: gitlab_rails
      key: db_adapter
      value: "'postgresql'"
    - namespace: gitlab_rails
      key: db_encoding
      value: "'utf8'"
    - namespace: gitlab_rails
      key: db_host
      value: "'localhost'"
    - namespace: gitlab_rails
      key: db_port
      value: "5432"
    - namespace: gitlab_rails
      key: db_database
      value: "'{{ dependencies_postgres_db }}'"
    - namespace: gitlab_rails
      key: db_username
      value: "'{{ dependencies_postgres_user }}'"
    - namespace: gitlab_rails
      key: db_password
      value: "'{{ dependencies_postgres_passwd }}'"

    # Enable backups to S3 -> S3 simulated with local minio container
    - namespace: gitlab_rails
      key: backup_upload_remote_directory
      value: "'gitlab-backup'"
    - namespace: gitlab_rails
      key: backup_upload_connection
      block: >-
        gitlab_rails['backup_upload_connection'] = {
          'provider' => 'AWS',
          # region us-east-1 required for minio
          'region' => '{{ dependencies_minio_region }}',
          'path_style' => true, # Use path style instead of subdomain style for minio
          'aws_access_key_id' => '{{ dependencies_minio_accesskey }}',
          'aws_secret_access_key' => '{{ dependencies_minio_secretkey }}',
          'endpoint' => '{{ dependencies_minio_endpoint }}',
          # # If IAM profile use is enabled, remove aws_access_key_id and aws_secret_access_key
          'use_iam_profile' => false
        }
    
    # Enable artifacts to S3 -> S3 simulated with local minio container
    - namespace: gitlab_rails
      key: artifacts_enabled
      value: "true"
    - namespace: gitlab_rails
      key: artifacts_object_store_enabled
      value: "true"
    - namespace: gitlab_rails
      key: artifacts_object_store_remote_directory
      value: "'gitlab-artifacts'"
    - namespace: gitlab_rails
      key: artifacts_object_store_connection
      block: >-
        gitlab_rails['artifacts_object_store_connection'] = {
          'provider' => 'AWS',
          # region us-east-1 required for minio
          'region' => '{{ dependencies_minio_region }}',
          'path_style' => true, # Use path style instead of subdomain style for minio
          'aws_access_key_id' => '{{ dependencies_minio_accesskey }}',
          'aws_secret_access_key' => '{{ dependencies_minio_secretkey }}',
          'endpoint' => '{{ dependencies_minio_endpoint }}',
          # # If IAM profile use is enabled, remove aws_access_key_id and aws_secret_access_key
          'use_iam_profile' => false
        }

    # Enable mr diffs to S3 -> S3 simulated with local minio container
    - namespace: gitlab_rails
      key: external_diffs_enabled
      value: "true"
    - namespace: gitlab_rails
      key: external_diffs_object_store_enabled
      value: "true"
    - namespace: gitlab_rails
      key: external_diffs_object_store_remote_directory
      value: "'gitlab-mrdiffs'"
    - namespace: gitlab_rails
      key: external_diffs_object_store_connection
      block: >-
        gitlab_rails['external_diffs_object_store_connection'] = {
          'provider' => 'AWS',
          # region us-east-1 required for minio
          'region' => '{{ dependencies_minio_region }}',
          'path_style' => true, # Use path style instead of subdomain style for minio
          'aws_access_key_id' => '{{ dependencies_minio_accesskey }}',
          'aws_secret_access_key' => '{{ dependencies_minio_secretkey }}',
          'endpoint' => '{{ dependencies_minio_endpoint }}',
          # # If IAM profile use is enabled, remove aws_access_key_id and aws_secret_access_key
          'use_iam_profile' => false
        }
    
    # Enable lfs to S3 -> S3 simulated with local minio container
    - namespace: gitlab_rails
      key: lfs_enabled
      value: "true"
    - namespace: gitlab_rails
      key: lfs_object_store_enabled
      value: "true"
    - namespace: gitlab_rails
      key: lfs_object_store_remote_directory
      value: "'gitlab-lfs'"
    - namespace: gitlab_rails
      key: lfs_object_store_connection
      block: >-
        gitlab_rails['lfs_object_store_connection'] = {
          'provider' => 'AWS',
          # region us-east-1 required for minio
          'region' => '{{ dependencies_minio_region }}',
          'path_style' => true, # Use path style instead of subdomain style for minio
          'aws_access_key_id' => '{{ dependencies_minio_accesskey }}',
          'aws_secret_access_key' => '{{ dependencies_minio_secretkey }}',
          'endpoint' => '{{ dependencies_minio_endpoint }}',
          # # If IAM profile use is enabled, remove aws_access_key_id and aws_secret_access_key
          'use_iam_profile' => false
        }

    # Enable uploads to S3 -> S3 simulated with local minio container
    - namespace: gitlab_rails
      key: uploads_object_store_enabled
      value: "true"
    - namespace: gitlab_rails
      key: uploads_object_store_remote_directory
      value: "'gitlab-uploads'"
    - namespace: gitlab_rails
      key: uploads_object_store_connection
      block: >-
        gitlab_rails['uploads_object_store_connection'] = {
          'provider' => 'AWS',
          # region us-east-1 required for minio
          'region' => '{{ dependencies_minio_region }}',
          'path_style' => true, # Use path style instead of subdomain style for minio
          'aws_access_key_id' => '{{ dependencies_minio_accesskey }}',
          'aws_secret_access_key' => '{{ dependencies_minio_secretkey }}',
          'endpoint' => '{{ dependencies_minio_endpoint }}',
          # # If IAM profile use is enabled, remove aws_access_key_id and aws_secret_access_key
          'use_iam_profile' => false
        }

    # Enable terraform state to S3 -> S3 simulated with local minio container
    - namespace: gitlab_rails
      key: terraform_state_enabled
      value: "true"
    - namespace: gitlab_rails
      key: terraform_state_object_store_enabled
      value: "true"
    - namespace: gitlab_rails
      key: terraform_state_object_store_remote_directory
      value: "'gitlab-terraform'"
    - namespace: gitlab_rails
      key: terraform_state_object_store_connection
      block: >-
        gitlab_rails['terraform_state_object_store_connection'] = {
          'provider' => 'AWS',
          # region us-east-1 required for minio
          'region' => '{{ dependencies_minio_region }}',
          'path_style' => true, # Use path style instead of subdomain style for minio
          'aws_access_key_id' => '{{ dependencies_minio_accesskey }}',
          'aws_secret_access_key' => '{{ dependencies_minio_secretkey }}',
          'endpoint' => '{{ dependencies_minio_endpoint }}',
          # # If IAM profile use is enabled, remove aws_access_key_id and aws_secret_access_key
          'use_iam_profile' => false
        }
    
    # Enable Secure Files to S3 -> S3 simulated with local minio container
    - namespace: gitlab_rails
      key: ci_secure_files_enabled
      value: "true"
    - namespace: gitlab_rails
      key: ci_secure_files_object_store_enabled
      value: "true"
    - namespace: gitlab_rails
      key: ci_secure_files_object_store_remote_directory
      value: "'gitlab-secure-files'"
    - namespace: gitlab_rails
      key: ci_secure_files_object_store_connection
      block: >-
        gitlab_rails['ci_secure_files_object_store_connection'] = {
          'provider' => 'AWS',
          # region us-east-1 required for minio
          'region' => '{{ dependencies_minio_region }}',
          'path_style' => true, # Use path style instead of subdomain style for minio
          'aws_access_key_id' => '{{ dependencies_minio_accesskey }}',
          'aws_secret_access_key' => '{{ dependencies_minio_secretkey }}',
          'endpoint' => '{{ dependencies_minio_endpoint }}',
          # # If IAM profile use is enabled, remove aws_access_key_id and aws_secret_access_key
          'use_iam_profile' => false
        }
    
    # Enable packages to S3 -> S3 simulated with local minio container
    - namespace: gitlab_rails
      key: packages_enabled
      value: "true"
    - namespace: gitlab_rails
      key: packages_object_store_enabled
      value: "true"
    - namespace: gitlab_rails
      key: packages_object_store_remote_directory
      value: "'gitlab-packages'"
    - namespace: gitlab_rails
      key: packages_object_store_connection
      block: >-
        gitlab_rails['packages_object_store_connection'] = {
          'provider' => 'AWS',
          # region us-east-1 required for minio
          'region' => '{{ dependencies_minio_region }}',
          'path_style' => true, # Use path style instead of subdomain style for minio
          'aws_access_key_id' => '{{ dependencies_minio_accesskey }}',
          'aws_secret_access_key' => '{{ dependencies_minio_secretkey }}',
          'endpoint' => '{{ dependencies_minio_endpoint }}',
          # # If IAM profile use is enabled, remove aws_access_key_id and aws_secret_access_key
          'use_iam_profile' => false
        }
    
    # Enable dependency proxy to S3 -> S3 simulated with local minio container
    - namespace: gitlab_rails
      key: dependency_proxy_enabled
      value: "true"
    - namespace: gitlab_rails
      key: dependency_proxy_object_store_enabled
      value: "true"
    - namespace: gitlab_rails
      key: dependency_proxy_object_store_remote_directory
      value: "'gitlab-dependency-proxy'"
    - namespace: gitlab_rails
      key: dependency_proxy_object_store_connection
      block: >-
        gitlab_rails['dependency_proxy_object_store_connection'] = {
          'provider' => 'AWS',
          # region us-east-1 required for minio
          'region' => '{{ dependencies_minio_region }}',
          'path_style' => true, # Use path style instead of subdomain style for minio
          'aws_access_key_id' => '{{ dependencies_minio_accesskey }}',
          'aws_secret_access_key' => '{{ dependencies_minio_secretkey }}',
          'endpoint' => '{{ dependencies_minio_endpoint }}',
          # # If IAM profile use is enabled, remove aws_access_key_id and aws_secret_access_key
          'use_iam_profile' => false
        }

    # Enable registry to S3 -> S3 simulated with local minio container
    - namespace: registry
      key: storage
      block: >-
        registry['storage'] = {
          's3' => {
            'accesskey' => '{{ dependencies_minio_accesskey }}',
            'secretkey' => '{{ dependencies_minio_secretkey }}',
            'bucket' => 'gitlab-registry',
            'region' => '{{ dependencies_minio_region }}',
            'regionendpoint' => '{{ dependencies_minio_endpoint }}',
            'pathstyle' => true
          }
        }

    # Set the repositories data dir
    # ATTENTION - this is a depricated config
    # Use gitaly['configuration'] instead
    # https://docs.gitlab.com/ee/administration/reference_architectures/2k_users.html#configure-gitaly
    # - regexp: "^# git_data_dirs"
    #   block: |
    #     git_data_dirs({
    #       "default" => {
    #         "path" => "/var/opt/gitlab/git-data"
    #       }
    #     })
    - namespace: gitaly
      key: configuration
      block: >-
        gitaly['configuration'] = {
          storage: [
            {
              name: 'default',
              path: '/vagrant/repositories',
            }
          ]
        }
    # gitlab_mattermost_external_url: http://chat.lokal
    # gitlab_mattermost_additional_configs:
    #   TeamSettings:
    #     SiteName: "chat.lokal"
    #   EmailSettings:
    #     EnableSignUpWithEmail: False
    #     EnableSignInWithEmail: False
    #     EnableSignInWithUsername: False
    #     SendEmailNotifications: True
    #     UseChannelInEmailNotifications: True
    #     FeedbackName: "chat.lokal"
    #     FeedbackEmail: "gitlab@example.com"
    #     SMTPUsername: "gitlab@example.com"
    #     SMTPServer: "localhost"
    #     SMTPPort: "1025"

    # Access Token to attach to root user for terraform api access
    gitlab_api_access_token: glpat-a6RGcfFJeS9-CRpLMs8o

  roles:
  - andrelohmann.root_colored_prompt
  - andrelohmann.postgresql
  - docker_compose_dependencies
  - andrelohmann.terraform
  - ansible-role-gitlab
  - gitlab_configuration

...
